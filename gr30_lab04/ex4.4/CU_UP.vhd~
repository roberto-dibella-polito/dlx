library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;
use work.myTypes.all;

entity CU_UP is
  port (
    -- FIRST PIPE STAGE OUTPUTS
    EN1    : out std_logic;               -- enables the register file and the pipeline registers
    RF1    : out std_logic;               -- enables the read port 1 of the register file
    RF2    : out std_logic;               -- enables the read port 2 of the register file
    WF1    : out std_logic;               -- enables the write port of the register file
    -- SECOND PIPE STAGE OUTPUTS
    EN2    : out std_logic;               -- enables the pipe registers
    S1     : out std_logic;               -- input selection of the first multiplexer
    S2     : out std_logic;               -- input selection of the second multiplexer
    ALU1   : out std_logic;               -- alu control bit
    ALU2   : out std_logic;               -- alu control bit
    -- THIRD PIPE STAGE OUTPUTS
    EN3    : out std_logic;               -- enables the memory and the pipeline registers
    RM     : out std_logic;               -- enables the read-out of the memory
    WM     : out std_logic;               -- enables the write-in of the memory
    S3     : out std_logic;               -- input selection of the multiplexer
    -- INPUTS
    OPCODE : in  std_logic_vector(OP_CODE_SIZE - 1 downto 0);
    FUNC   : in  std_logic_vector(FUNC_SIZE - 1 downto 0);              
    Clk : in std_logic;
    Rst : in std_logic);                  -- Active Low
end CU_UP;

architecture STRUCTURE of CU_UP is

  type mem_array is array (integer range 0 to MEM_SIZE-1) of std_logic_vector(4 downto 0);

  signal OUT_MEM: mem_array := ("00" & OUT_ADDI1(12 downto 10),
                                OUT_ADDI1(9 downto 5),
                                OUT_ADDI1(4 downto 0),
                                "00" & OUT_SUBI1(12 downto 10),
                                OUT_SUBI1(9 downto 5),
                                OUT_SUBI1(4 downto 0),
                                "00" & OUT_ANDI1(12 downto 10),
                                OUT_ANDI1(9 downto 5),
                                OUT_ANDI1(4 downto 0),
                                "00" & OUT_ORI1(12 downto 10),
                                OUT_ORI1(9 downto 5),
                                OUT_ORI1(4 downto 0),
                                "00" & OUT_ADDI2(12 downto 10),
                                OUT_ADDI2(9 downto 5),
                                OUT_ADDI2(4 downto 0),
                                "00" & OUT_SUBI2(12 downto 10),
                                OUT_SUBI2(9 downto 5),
                                OUT_SUBI2(4 downto 0),
                                "00" & OUT_ANDI2(12 downto 10),
                                OUT_ANDI2(9 downto 5),
                                OUT_ANDI2(4 downto 0),
                                "00" & OUT_ORI2(12 downto 10),
                                OUT_ORI2(9 downto 5),
                                OUT_ORI2(4 downto 0),
                                "00" & OUT_MOV(12 downto 10),
                                OUT_MOV(9 downto 5),
                                OUT_MOV(4 downto 0),
                                "00" & S_REG1(12 downto 10),
                                OUT_S_REG1(9 downto 5),
                                OUT_S_REG1(4 downto 0),
                                "00" & S_REG2(12 downto 10),
                                OUT_S_REG2(9 downto 5),
                                OUT_S_REG2(4 downto 0),
                                "00" & OUT_L_MEM1(12 downto 10),
                                OUT_L_MEM1(9 downto 5),
                                OUT_L_MEM1(4 downto 0),
                                "00" & OUT_L_MEM2(12 downto 10),
                                OUT_L_MEM2(9 downto 5),
                                OUT_L_MEM2(4 downto 0),
                                "00" & OUT_ADD(12 downto 10),
                                OUT_ADD(9 downto 5),
                                OUT_ADD(4 downto 0),
                                "00" & OUT_SUB(12 downto 10),
                                OUT_SUB(9 downto 5),
                                OUT_SUB(4 downto 0),
                                "00" & OUT_AND(12 downto 10),
                                OUT_AND(9 downto 5),
                                OUT_AND(4 downto 0),
                                "00" & OUT_OR(12 downto 10),
                                OUT_OR(9 downto 5),
                                OUT_OR(4 downto 0),
                                "00" & OUT_NOP(12 downto 10),
                                OUT_NOP(9 downto 5),
                                OUT_NOP(4 downto 0) );

  component ring_shifter
    port( CLK,RESET : in std_logic;
          Q         : inout std_logic_vector(2 downto 0));
  end component;

  component mux2to1 
    generic (N : integer);
    port (IN0,IN1 : in std_logic_vector (N-1 downto 0); --input signals
          SEL: in std_logic; --select signal
          MUX_OUT : out std_logic_vector (N-1 downto 0));--N bits output
  end component;

begin
    

end STRUCTURE;
  


  
